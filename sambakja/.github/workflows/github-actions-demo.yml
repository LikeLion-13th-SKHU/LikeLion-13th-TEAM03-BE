# .github/workflows/github-actions-demo.yml
name: Spring Boot CI/CD Pipeline
run-name: ${{ github.actor }}가 Spring Boot 애플리케이션을 빌드하고 배포합니다 🚀

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  APP_NAME: 'sambakja'

jobs:
  # 1단계: 테스트 및 빌드
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: ☕ JDK ${{ env.JAVA_VERSION }} 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle
        
    - name: 🔧 Gradle 실행 권한 부여
      run: chmod +x gradlew
      
    - name: 🧪 테스트 실행
      run: ./gradlew test --no-daemon
      
    - name: 📊 테스트 결과 발행
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 'Test Results'
        path: 'build/test-results/test/*.xml'
        reporter: java-junit
        
    - name: 🏗️ 애플리케이션 빌드
      run: ./gradlew bootJar --no-daemon
      
    - name: 📦 JAR 파일 업로드
      uses: actions/upload-artifact@v3
      with:
        name: jar-file
        path: build/libs/*.jar
        retention-days: 1

  # 2단계: Docker 이미지 빌드
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 📦 JAR 파일 다운로드
      uses: actions/download-artifact@v3
      with:
        name: jar-file
        path: build/libs/
        
    - name: 🐳 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Docker Hub 로그인
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏷️ 태그 결정
      id: tag
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: 🏗️ Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.tag.outputs.tag }}
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 3단계: 서버 배포 (develop 또는 main 브랜치 모두)
  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: 🚀 서버에 배포
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USERNAME }}
        key: ${{ secrets.DEV_SERVER_SSH_KEY }}
        script: |
          echo "🔄 기존 컨테이너 중지 및 제거..."
          sudo docker stop ${{ env.APP_NAME }} || true
          sudo docker rm ${{ env.APP_NAME }} || true
          
          echo "📥 새 이미지 다운로드..."
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
            IMAGE_TAG="latest"
          else
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:dev
            IMAGE_TAG="dev"
          fi
          
          echo "🚀 새 컨테이너 실행..."
          sudo docker run -d \
            --name ${{ env.APP_NAME }} \
            -p 8080:8080 \
            --restart unless-stopped \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${IMAGE_TAG}
            
    - name: 🩺 헬스 체크
      run: |
        echo "⏳ 애플리케이션 시작 대기 중..."
        sleep 30
        
        echo "🩺 헬스 체크 수행..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.DEV_SERVER_HOST }}:8080/actuator/health)
        if [ $response -eq 200 ]; then
          echo "✅ 배포 성공!"
        else
          echo "❌ 헬스 체크 실패 (HTTP $response)"
          exit 1
        fi
        
    - name: 📢 배포 완료 알림
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "🎉 메인 브랜치가 성공적으로 배포되었습니다!"
        else
          echo "🎉 개발 브랜치가 성공적으로 배포되었습니다!"
        fi
